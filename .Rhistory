gpi[0,0]
gpi = matrix(0,nrow=2,ncolumn=2) # 'pi' probability of having a particular pattern
gpi = matrix(0,nrow=2,ncol=2) # 'pi' probability of having a particular pattern
gpi[0,0]
gpi
gpi[1,1]
dcounts = matrix(0,nrow=2,ncol=2)
sum(dcounts)
dcounts
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 4
dcounts[1,2] = 4
dcounts[2,1] = 4
dcounts[2,2] = 4
sum(dcounts)
total_counts = sum(dcounts)
gpi = gpi_init
gpi_init = matrix(0,nrow=2,ncol=2) # 'pi' probability of having a particular pattern
gpi_init[1,1] = 1/2
gpi_init[2,2] = 1/2
gpi = gpi_init
gpi
gpi[1,1] = 0.7
gpi
gpi_init
gpi = gpi_init
print(1)
print(1,2)
print c(1,2)
print(c(1,2))
gpi = gpi_init
for (i in 1:10){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi))
}
gpi = gpi_init
for (i in 1:10){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
gpi = gpi_init
for (i in 1:100){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 4
dcounts[1,2] = 2
dcounts[2,1] = 2
dcounts[2,2] = 4
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:100){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 4
dcounts[1,2] = 6
dcounts[2,1] = 6
dcounts[2,2] = 4
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:100){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 4
dcounts[1,2] = 1
dcounts[2,1] = 1
dcounts[2,2] = 4
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:100){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 7
dcounts[1,2] = 1
dcounts[2,1] = 2
dcounts[2,2] = 4
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:100){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 7
dcounts[1,2] = 1
dcounts[2,1] = 2
dcounts[2,2] = 4
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 7
dcounts[1,2] = 2
dcounts[2,1] = 2
dcounts[2,2] = 7
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
8/18
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 3
dcounts[1,2] = 2
dcounts[2,1] = 2
dcounts[2,2] = 3
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
8/10
?apply
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 20
dcounts[1,2] = 10
dcounts[2,1] = 10
dcounts[2,2] = 20
total_counts = sum(dcounts)
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
rbinom(10,0.5)
rbinom(0.5,10)
?rbinom
rbinom(10,0,0.5)
rbinom(10,10,0.5)
rbinom(10,1,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
rbinom(1,10,0.5)
?multinom
rmultinom(1,10,c(0.25,0.25,0.25,0.25))
tst = rmultinom(1,10,c(1/4,1/4,1/4,1/4))
tst
tst[1]
tst[2]
tst[3]
tst[4]
?c
c(4)*4
rep(4,4)
rep(1/4,4)
dcounts
tst
dcounts = tst
dcounts
dcounts = matrix(0,nrow=2,ncol=2)
dcounts[1,1] = 20
dcounts[1,2] = 10
dcounts[2,1] = 10
dcounts[2,2] = 20
total_counts = sum(dcounts)
counts = matrix(0,nrow=2,ncol=2)
counts
vector(counts)
as.vector(counts)
as.vector(count) = as.vector(tst)
as.vector(counts) = as.vector(tst)
tst
as.matrix(tst,nrow=2,ncol=2)
dim(tst) = c(2,2)
tst
bicat_sim = function(trials,p){
n_00 = rbinom(1,trials,p)
n_11 = trials - n_00
results_00 = rmultinom(1,n_00,rep(1/4,4))
dim(results_00) = c(2,2)
counts = results_00
results_11 = rbinom(1,n_11,1/2)
counts[1,1] = counts[1,1] + results_11
counts[2,2] = counts[2,2] + (n_11 - results_11)
return(counts)
}
bicat_sim(10,0.5)
bicat_sim(10,1)
bicat_sim(10,1)
bicat_sim(10,1)
bicat_sim(10,1)
bicat_sim(100,1)
bicat_sim(100,0.8)
bicat_EM = function(dcounts,niter){
print(dcounts)
# prob of a gene being in each group
gpi_init = matrix(0,nrow=2,ncol=2) # 'pi' probability of having a particular pattern
gpi_init[1,1] = 1/2
gpi_init[2,2] = 1/2
# we're going to simplify to two groups: incoherent and coherent between two groups
# we assume for each group, theres an equal chance of having a response in either direction
# we can maybe explicitly model a direction bias
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
return(gpi)
}
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM = function(dcounts,niter){
print(dcounts)
total_counts = sum(dcounts)
# prob of a gene being in each group
gpi_init = matrix(0,nrow=2,ncol=2) # 'pi' probability of having a particular pattern
gpi_init[1,1] = 1/2
gpi_init[2,2] = 1/2
# we're going to simplify to two groups: incoherent and coherent between two groups
# we assume for each group, theres an equal chance of having a response in either direction
# we can maybe explicitly model a direction bias
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:20){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
return(gpi)
}
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(10,0.5),20)
bicat_EM(bicat_sim(20,0.5),20)
bicat_EM(bicat_sim(20,0.5),20)
bicat_EM(bicat_sim(20,0.5),20)
bicat_EM(bicat_sim(20,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(100,0.5),20)
bicat_EM(bicat_sim(1000,0.5),20)
bicat_EM(bicat_sim(1000,0.5),20)
bicat_EM(bicat_sim(1000,0.5),20)
bicat_EM(bicat_sim(1000,0.9),20)
bicat_EM(bicat_sim(1000,0.9),20)
bicat_EM(bicat_sim(1000,0.9),20)
bicat_EM(bicat_sim(1000,0.9),20)
bicat_EM(bicat_sim(1000,0.9),20)
bicat_EM(bicat_sim(1000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),20)
bicat_EM(bicat_sim(10000,0.99),100)
bicat_EM(bicat_sim(10000,0.99),100)
bicat_EM(bicat_sim(10000,0.99),100)
bicat_EM(bicat_sim(10000,0.99),100)
bicat_EM(bicat_sim(10000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM = function(dcounts,niter){
print(dcounts)
total_counts = sum(dcounts)
# prob of a gene being in each group
gpi_init = matrix(0,nrow=2,ncol=2) # 'pi' probability of having a particular pattern
gpi_init[1,1] = 1/2
gpi_init[2,2] = 1/2
# we're going to simplify to two groups: incoherent and coherent between two groups
# we assume for each group, theres an equal chance of having a response in either direction
# we can maybe explicitly model a direction bias
# gpi that we're going to be changing
gpi = gpi_init
for (i in 1:niter){
resp_00 = (gpi[1,1]/4)/((gpi[1,1]/4) + (gpi[2,2]/2))
resp_11 = (gpi[2,2]/2)/((gpi[1,1]/4) + (gpi[2,2]/2))
gpi[1,1] = (resp_00*(dcounts[1,1]+dcounts[2,2])+(dcounts[1,2]+dcounts[2,1]))/total_counts
gpi[2,2] = resp_11*(dcounts[1,1]+dcounts[2,2])/total_counts
print(c(resp_00,resp_11,gpi[1,1],gpi[2,2]))
}
return(gpi)
}
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,0.99),100)
bicat_EM(bicat_sim(100000,1.0),100)
bicat_EM(bicat_sim(100000,1.0),1000)
bicat_EM(bicat_sim(100000,0.8),1000)
bicat_EM(bicat_sim(100000,0.8),100)
bicat_EM(bicat_sim(100000,0.8),20)
capabilities()['cairo']
?svg
svg()
dev.off()
capabilities()['cairo']
require(vegan)
?diversity
setwd('~/Documents/Dinner/gd TCR/')
## folder tree organizes patients and corresponding TCR sequence data
# patient group -> patient -> sequencing tables
# for each patient, we have (IEL,PBL) x (TRD,TRG) tables
# all are from Vd1 sorted gdT
# set plot folder
plot_folder = 'plots/'
# define groups and patient ids
patient_groups = c('Active','Challenge','Control','GFD','Uncategorized')
patient_ids = list(c(22,35,46,47,81),c(1,72,78),c(7,13,40,53,110),c(3,4,28,33,43),c(49))
# without challenge
# patient_groups = c('Control','Active','GFD')
# patient_ids = list(c(7,13,40,53),c(22,35,46,47,81),c(3,4,28,33,43))
# given patient group and id, return tcr sequencing data table
read_patient = function(group,id) {
# tables to retrieve per individual
tissues = c('IEL','PBL')
chains = c('TRG','TRD')
# want to add group,id,tissue,chain columns to data table
# explicitly written to keep types consistent
patient.df = data.frame(Group=character(0),ID=numeric(0),Tissue=character(0),Chain=character(0),
TRV=character(0),CDR3=character(0),TRJ=character(0),Freq=numeric(0),
Count=numeric(0),NT=numeric(0),stringsAsFactors=FALSE)
for (i in 1:length(tissues)) {
for (j in 1:length(chains)) {
table_file = paste('data/parsed/',group,'/Chicago #',id,
'/Chicago #',id,'_',tissues[i],'_Vd1_',chains[j],'.txt',sep='')
if (file.exists(table_file)) {
seqs.df = read.table(table_file,header=T,sep='\t',stringsAsFactors=FALSE)
colnames(seqs.df) = c('TRV','CDR3','TRJ','Freq','Count','NT')
# add columns and merge with current patient data table
patient.df = rbind(patient.df,cbind(data.frame(Group=group,ID=id,Tissue=tissues[i],
Chain=chains[j],stringsAsFactors=FALSE),seqs.df))
}
}
}
return(patient.df)
}
# mostly works, there are some file warnings -- should check
## iterate through all groups and ids and read patient tables
all_patients.df = data.frame(matrix(nrow=0,ncol=10))
for (i in 1:length(patient_groups)) {
for (j in 1:length(patient_ids[[i]])) {
all_patients.df = rbind(all_patients.df,read_patient(patient_groups[i],patient_ids[[i]][j]))
}
}
## slightly modify TRJ labeling => make '2 or 1' equivalent to '1 or 2'
all_patients.df[all_patients.df$TRJ=='2 or 1',]$TRJ = '1 or 2'
# set order of patient group
all_patients.df$Group = factor(all_patients.df$Group,levels=c('Control','Active','GFD','Challenge','Uncategorized'))
require(reshape2)
require(plyr)
require(ggplot2)
require(RColorBrewer)
require(vegan)
diversity_summary = ddply(all_patients.df,.(Group,ID,Tissue,Chain),summarize,
shannon=diversity(Count,index='shannon'),simpson=diversity(Count,index='simpson'))
g = ggplot(diversity_summary,aes(factor(ID),shannon))
g = g + geom_point(aes(color=Tissue,shape=Chain),size=3)
g = g + facet_grid(~Group,scales='free_x',space='free_x')
g = g + xlab('Patient ID')
g
g = ggplot(diversity_summary,aes(Chain,shannon))
g = g + geom_point()
g
g = ggplot(diversity_summary,aes(Chain,shannon))
g = g + geom_point()
g = g + geom_line(aes(ID))
g
g = ggplot(diversity_summary,aes(Chain,shannon))
g = g + geom_point()
g = g + geom_line(aes(group=ID))
g
g = ggplot(diversity_summary,aes(Chain,shannon))
g = g + geom_point(aes(color=Group))
g = g + geom_line(aes(group=ID))
g
g = ggplot(diversity_summary,aes(Chain,shannon))
g = g + geom_point(aes(color=Group))
g = g + geom_line(aes(group=ID,color=Group))
g
g = ggplot(diversity_summary,aes(Chain,shannon,color=Group))
g = g + geom_point() + geom_boxplot()
g = g + geom_line(aes(group=ID))
g
g = ggplot(diversity_summary,aes(Chain,simpson,color=Group))
g = g + geom_point() + geom_boxplot()
g = g + geom_line(aes(group=ID))
g
g = ggplot(diversity_summary[diversity_summary$Tissue=='IEL',],aes(Chain,simpson,color=Group))
g = g + geom_point() + geom_boxplot()
g = g + geom_line(aes(group=ID))
g
g = ggplot(diversity_summary[diversity_summary$Tissue=='IEL',],aes(Chain,simpson,color=Group))
g = g + geom_point()
# g = g + geom_boxplot()
g = g + geom_line(aes(group=ID))
g
g = ggplot(diversity_summary[diversity_summary$Tissue=='IEL',],aes(Chain,shannon,color=Group))
g = g + geom_point()
# g = g + geom_boxplot()
g = g + geom_line(aes(group=ID))
g
?t.test
t.test(diversity_summary[diversity_summary$Chain=='TRG',],diversity_summary[diversity_summary$Chain=='TRD',])
t.test(diversity_summary[diversity_summary$Chain=='TRG',]$shannon,diversity_summary[diversity_summary$Chain=='TRD',]$shannon)
diversity_summary[diversity_summary$Chain=='TRG',]$ID
diversity_summary[diversity_summary$Chain=='TRD',]$ID
t.test(diversity_summary[diversity_summary$Chain=='TRG',]$shannon,diversity_summary[diversity_summary$Chain=='TRD',]$shannon)
t.test(diversity_summary[diversity_summary$Chain=='TRG',]$shannon,diversity_summary[diversity_summary$Chain=='TRD',]$shannon)$p.value
tst = t.test(diversity_summary[diversity_summary$Chain=='TRG',]$shannon,diversity_summary[diversity_summary$Chain=='TRD',]$shannon)
tst
tst$p.value
class(tst)
class(diversity_summary)
head(diversity_summary)
diversity_summary$Group
diversity_summary$shannon
diversity_summary[,3]
diversity_summary[,4]
diversity_summary[,'shannon']
tst
class(tst)
tst$statistic
?KS
ks.test
?ks.test
?cdf
